//
//  RegionSelectorInteractor.swift
//  WriteMe
//
//  Created by Vladimir Mikhaylov on 03.10.2020.
//  Copyright (c) 2020 Vladimir Mikhaylov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation
import Combine

protocol RegionSelectorBusinessLogic
{
    func fetchRegions(reguest: RegionSelector.FetchRegion.Request)
    func saveRegion(reguest: RegionSelector.SaveRegion.Request)
}

protocol RegionSelectorDataStore
{
}

class RegionSelectorInteractor: RegionSelectorBusinessLogic, RegionSelectorDataStore
{
    var presenter: RegionSelectorPresentationLogic?
    var worker: RegionSelectorWorker?
    var regionWorker: RegionWorker
    
    private var bindings = Set<AnyCancellable>()
    
    init(regionWorker: RegionWorker = RegionWorker(service: RegionAPI()))
    {
        self.regionWorker = regionWorker
        bind()
    }
    
    private func bind()
    {
        let regionWorkerValueHandler: ([Region]) -> Void = { [weak self] regions in
            self?.presenter?.fetchRegions(response: RegionSelector.FetchRegion.Response(regions: regions))
        }
        
        regionWorker.$regions
            .receive(on: RunLoop.main)
            .sink(receiveValue: regionWorkerValueHandler)
            .store(in: &bindings)
    }

}

extension RegionSelectorInteractor {
    
    func fetchRegions(reguest: RegionSelector.FetchRegion.Request)
    {
        regionWorker.fetchRegions()
    }
    
    func saveRegion(reguest: RegionSelector.SaveRegion.Request)
    {
        SettingsDataStore.shared.saveObject(t: Region?.self, setting: .region, value: reguest.region)
        presenter?.saveRegion(response: RegionSelector.SaveRegion.Response())
    }
}

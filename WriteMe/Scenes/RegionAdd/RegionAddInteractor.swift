//
//  RegionAddInteractor.swift
//  WriteMe
//
//  Created by Vladimir on 13.11.2020.
//  Copyright (c) 2020 Vladimir Mikhaylov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RegionAddBusinessLogic
{
    func setup(request: RegionAdd.Setup.Request)
    func save(request: RegionAdd.Save.Request)
}

protocol RegionAddDataStore
{
    var newRegion: Region { get set }
}

class RegionAddInteractor: RegionAddDataStore
{
    var presenter: RegionAddPresentationLogic?
    var worker: RegionAddWorker?
    var regionRealmWorker: RegionWorker
    
    var newRegion: Region = Region()
    
    init(regionRealmWorker: RegionWorker = RegionWorker(service: RegionRealmDataStore()))
    {
        self.regionRealmWorker = regionRealmWorker
    }
    
    private func dataToRegion(_ regionFormFields: RegionAdd.RegionFormFields) -> Region {
        newRegion.name = regionFormFields.name ?? ""
        newRegion.phoneCode = regionFormFields.phoneCode ?? ""
        return newRegion
    }
}

extension RegionAddInteractor: RegionAddBusinessLogic
{

    func setup(request: RegionAdd.Setup.Request)
    {
        presenter?.setup(response: RegionAdd.Setup.Response())
    }
    
    func save(request: RegionAdd.Save.Request)
    {
        regionRealmWorker.saveRegion(region: dataToRegion(request.regionFormFields))
        presenter?.save(response: RegionAdd.Save.Response())
    }
    
}
